Heart beat message is used to monitor whether slave is alive.

In a particular interval slave servers send a dummy message or notification to 	main server. When server senses that for any slave serverâ€™s heart beat is not updated, it gets to know that this slave server is down and it can not commit or update any value which were supposed to store in the same slave server.

I. We have used UDP connection to maintain heart beat messages(reason behind this is: server need not to reply for each heart beat message but only updation at server side is good enough).

II. There is one thread in client side which will send heart beat message to server every now and then(in our project it is 5 seconds). Similarly we maintained a thread at server side which monitors these heart beat messages and keeps record whether client is in existence.


Slave servers periodically send a message to the cordination server (CS) to inform it that it is alive. When the CS senses that message has not arrived from the slave server side, it gets to know that the particular slave server is down.
We have maintained one thread on the slave server side which makes a UDP connection with the CS. This thread sends heartbeat message to CS for every 5 seconds.
Also, there is a heart beat listener thread on the CS side to receive heartbeat message from different slave servers. 
It maintains two maps:
 - timeout: to maintain count of every message received from a particular slave server. initiallized with 0 for all slave servers and incremented each time a message is received.
 - islive: to maintain whether a particular slave server is alive or not. initiallized with false for all slave servers and made true once a heartbeat message is received.
 There is a second thread in the CS which sleeps and checks if thread is alive or not. It resets the timeout map for all  slave servers to 0. Then it checks whether a slave server with 0 timeout and true alive status exists or not. If any such entry is found, that particular slave server is declared down.